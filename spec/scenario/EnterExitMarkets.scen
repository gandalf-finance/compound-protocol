-- Enter and Exit Markets Tests

Test "Enter Markets Idempotent"
	NewComptroller
	Assert Equal (Comptroller MembershipLength Geoff) Zero
	Assert Equal (Comptroller AssetsIn Geoff) []
	ListedGToken ZRX gZRX
	EnterMarkets Geoff gZRX
	Assert Log MarketEntered (gToken (Address gZRX)) (account (Address Geoff))
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	Assert True (Comptroller CheckMembership Geoff gZRX)
	ListedGToken OMG gOMG
	EnterMarkets Geoff gZRX gOMG
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 2)
	Assert True (Comptroller CheckMembership Geoff gZRX)
	Assert True (Comptroller CheckMembership Geoff gOMG)
	Assert Equal (Comptroller AssetsIn Geoff) [(Address gZRX) (Address gOMG)]

Test "Entered Market Must Be Supported"
	NewComptroller
	Assert Equal (Comptroller MembershipLength Geoff) Zero
	ListedGToken ZRX gZRX
	EnterMarkets Geoff gZRX
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	NewGToken OMG gOMG
	EnterMarkets Geoff gZRX gOMG
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	Assert True (Comptroller CheckMembership Geoff gZRX)
	Assert False (Comptroller CheckMembership Geoff gOMG)
	Support gOMG
	EnterMarkets Geoff gZRX gOMG
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 2)
	Assert True (Comptroller CheckMembership Geoff gZRX)
	Assert True (Comptroller CheckMembership Geoff gOMG)

Test "Cannot enter Markets beyond max assets"
	NewComptroller
	Comptroller SetMaxAssets 1
	Assert Equal (Comptroller MembershipLength Geoff) Zero
	ListedGToken ZRX gZRX
	ListedGToken OMG gOMG
	EnterMarkets Geoff gZRX gOMG
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	Assert True (Comptroller CheckMembership Geoff gZRX)
	Assert False (Comptroller CheckMembership Geoff gOMG)

Test "Exit single market"
	NewComptroller
	ListedGToken ZRX gZRX
	EnterMarkets Geoff gZRX
	Assert Equal (Comptroller AssetsIn Geoff) [(Address gZRX)]
	ExitMarket Geoff gZRX
	Assert Equal (Comptroller AssetsIn Geoff) []

Test "Exit non-entered market"
	NewComptroller
	ListedGToken ZRX gZRX
	ExitMarket Geoff gZRX
	Assert Equal (Comptroller AssetsIn Geoff) []

Test "Exit one of two market from the front"
	NewComptroller
	ListedGToken ZRX gZRX
	ListedGToken OMG gOMG
	EnterMarkets Geoff gZRX gOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address gZRX) (Address gOMG)]
	ExitMarket Geoff gZRX
	Assert Equal (Comptroller AssetsIn Geoff) [(Address gOMG)]

Test "Exit one of two market from the back"
	NewComptroller
	ListedGToken ZRX gZRX
	ListedGToken OMG gOMG
	EnterMarkets Geoff gZRX gOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address gZRX) (Address gOMG)]
	ExitMarket Geoff gOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address gZRX)]

Test "Exit multiple markets"
	NewComptroller
	ListedGToken ZRX gZRX
	ListedGToken OMG gOMG
	ListedGToken BAT gBAT
	ListedGToken REP gREP
	ListedGToken DAI gDAI
	EnterMarkets Geoff gZRX gOMG gBAT gREP gDAI
	Assert Equal (Comptroller AssetsIn Geoff) [(Address gZRX) (Address gOMG) (Address gBAT) (Address gREP) (Address gDAI)]
	ExitMarket Geoff gZRX
	Assert Equal (Comptroller AssetsIn Geoff) [(Address gDAI) (Address gOMG) (Address gBAT) (Address gREP)]
	ExitMarket Geoff gREP
	Assert Equal (Comptroller AssetsIn Geoff) [(Address gDAI) (Address gOMG) (Address gBAT)]
	ExitMarket Geoff gOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address gDAI) (Address gBAT)]
	ExitMarket Geoff gDAI
	Assert Equal (Comptroller AssetsIn Geoff) [(Address gBAT)]
	ExitMarket Geoff gBAT
	Assert Equal (Comptroller AssetsIn Geoff) []

Test "Realistic Market Scenario"
	PricedComptroller
	ListedGToken ZRX gZRX
	SetPriceCF gZRX 0.002 0.4
	ListedEtherToken gETH
	Comptroller SetCollateralFactor gETH 0.8
	ListedGToken BAT gBAT
	SetPriceCF gBAT 0.0015 0.3
	-- Mint some gZRX and gETH
	Prep Geoff 1250e18 ZRX gZRX
	Mint Geoff 1250e18 gZRX -- Liquidity -> 0.4 * 0.002 * 1250e18 = 1.0e18
	SendMintEth Geoff 2.5e18 gETH -- Liqiuidity -> 0.8 * 1.0 * 2.5e18 = 2.0e18
	-- Check liquidity is zero when not in any markets
	Assert Equal (Comptroller Liquidity Geoff) Zero
	-- Enter ZRX and check liquidity
	EnterMarkets Geoff gZRX
	Assert Equal (Comptroller Liquidity Geoff) 1.0e18
	-- Fail to borrow BAT due to liquidity
	Give gBAT 1000e18 BAT
	HoldInvariants
	Borrow Geoff 1000e18 gBAT -- 1000e18 * 0.0015 = 1.5e18 required liquidity
							  -- But since we're only in ZRX, we only have 1.0e18 liquidity
	Assert Failure COMPTROLLER_REJECTION BORROW_COMPTROLLER_REJECTION INSUFFICIENT_LIQUIDITY
	-- Enter gETH and check liquidity
	EnterMarkets Geoff gETH
	Assert Equal (Comptroller Liquidity Geoff) 3.0e18 -- Sum of gETH and gZRX liquidity from above
	-- Borrow previous BAT amount given liquidity
	Borrow Geoff 1000e18 gBAT
	Assert Equal (Comptroller Liquidity Geoff) 1.5e18 -- Less the borrow amount's toll
	-- Try to exit a eth market but fail due to given borrow requiring eth as collateral
	HoldInvariants
	ExitMarket Geoff gETH
	Assert Failure REJECTION EXIT_MARKET_REJECTION INSUFFICIENT_LIQUIDITY -- Liquidity check fails
	Assert Equal (Comptroller AssetsIn Geoff) [(Address gZRX) (Address gBAT) (Address gETH)]
	-- Repay some borrow and exit market OMG
	Allow Geoff gBAT
	RepayBorrow Geoff 500e18 gBAT
	Assert Equal (Comptroller Liquidity Geoff) 2.25e18 -- With 0.75e18 repaid
	ExitMarket Geoff gETH
	Assert Equal (Comptroller AssetsIn Geoff) [(Address gZRX) (Address gBAT)]
	Assert Equal (Comptroller Liquidity Geoff) 0.25e18 -- Less Eth's 2.0e18 collateral weight
	-- Try and exit gBAT (firist without, then after, repaying)
	HoldInvariants
	ExitMarket Geoff gBAT
	Assert Failure NONZERO_BORROW_BALANCE EXIT_MARKET_BALANCE_OWED
	RepayBorrow Geoff UInt256Max gBAT
	ExitMarket Geoff gBAT
	Assert Equal (Comptroller AssetsIn Geoff) [(Address gZRX)]
	Assert Equal (Comptroller Liquidity Geoff) 1.0e18 -- Back to just gZRX
	-- Exit gZRX
	ExitMarket Geoff gZRX
	Assert Equal (Comptroller AssetsIn Geoff) []
	Assert Equal (Comptroller Liquidity Geoff) 0e18 -- Back to nothing
