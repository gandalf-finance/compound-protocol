-- These are included in each scenario

Macro Successfully
    Invariant Success

Macro AllowFailures
    ClearInvariants Success

Macro PricedComptroller closeFactor=0.1 maxAssets=20
    Unitroller Deploy
    PriceOracle Deploy Simple
    ComptrollerImpl Deploy ScenarioG1 ScenComptrollerG1
    Unitroller SetPendingImpl ScenComptrollerG1
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address Zero) (Address Zero) (Address Zero) (Address Zero) (Address Zero) -- if listing gEther use ListedEtherToken to replace proxy
    ComptrollerImpl ScenComptrollerG1 BecomeG1 (PriceOracleProxy Address) closeFactor maxAssets
    ComptrollerImpl Deploy Scenario ScenComptroller
    Unitroller SetPendingImpl ScenComptroller
    ComptrollerImpl ScenComptroller Become

Macro NewComptroller price=1.0 closeFactor=0.1 maxAssets=20
    --g1
    Unitroller Deploy
    PriceOracle Deploy Fixed price
    ComptrollerImpl Deploy ScenarioG1 ScenComptrollerG1
    Unitroller SetPendingImpl ScenComptrollerG1
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address Zero) (Address Zero) (Address Zero) (Address Zero) (Address Zero) -- if listing gEther use ListedEtherToken to replace proxy
    ComptrollerImpl ScenComptrollerG1 BecomeG1 (PriceOracleProxy Address) closeFactor maxAssets
    --g2
    ComptrollerImpl Deploy StandardG2 ComptrollerG2
    Unitroller SetPendingImpl ComptrollerG2
    ComptrollerImpl ComptrollerG2 BecomeG2
    --g3
    ComptrollerImpl Deploy StandardG3 ComptrollerG3
    Unitroller SetPendingImpl ComptrollerG3
    ComptrollerImpl ComptrollerG3 BecomeG3 1e18 []
    --g4
    ComptrollerImpl Deploy Scenario ScenComptroller
    Unitroller SetPendingImpl ScenComptroller
    ComptrollerImpl ScenComptroller Become

Macro NewGToken erc20 gToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 tokenType=Standard delegatorType=GErc20DelegatorScenario gTokenType=GErc20DelegateScenario admin=Admin becomeImplementationData="0x0"
    Erc20 Deploy tokenType erc20 erc20
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    GTokenDelegate Deploy gTokenType gErc20Delegate
    GToken Deploy delegatorType gToken gToken (Erc20 erc20 Address) (Comptroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals admin (GTokenDelegate gErc20Delegate Address) becomeImplementationData

-- Same as NewGToken but does not deploy an ERC20. Used for special ERC20s that are initialized differently
Macro NewGTokenBringERC20 erc20 gToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 delegatorType=GErc20DelegatorScenario gTokenType=GErc20DelegateScenario admin=Admin becomeImplementationData="0x0"
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    GTokenDelegate Deploy gTokenType gErc20Delegate
    GToken Deploy delegatorType gToken gToken (Erc20 erc20 Address) (Comptroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals admin (GTokenDelegate gErc20Delegate Address) becomeImplementationData

Macro NewGTokenImmutable erc20 gToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 tokenType=Standard gTokenType=Scenario admin=Admin
    Erc20 Deploy tokenType erc20 erc20
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    GToken Deploy gTokenType gToken gToken (Erc20 erc20 Address) (Comptroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals admin

Macro NewEtherToken gToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 admin=Admin
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    GToken Deploy gEtherScenario gToken gToken (Comptroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals admin

Macro ListedGToken erc20 gToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 tokenType=Standard delegatorType=GErc20DelegatorScenario gTokenType=GErc20DelegateScenario admin=Admin
    NewGToken erc20 gToken borrowRate initialExchangeRate decimals tokenType delegatorType gTokenType admin
    Comptroller SupportMarket gToken

Macro ListedGTokenImmutable erc20 gToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 tokenType=Standard gTokenType=Scenario admin=Admin
    NewGTokenImmutable erc20 gToken borrowRate initialExchangeRate decimals tokenType gTokenType admin
    Comptroller SupportMarket gToken

Macro ListedEtherToken gToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 admin=Admin
    NewEtherToken gToken borrowRate initialExchangeRate decimals admin
    Comptroller SupportMarket gToken
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address gETH) (Address Zero) (Address Zero) (Address Zero) (Address Zero)
    Comptroller SetPriceOracle (PriceOracleProxy Address)

Macro ListedEtherTokenMinted gToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 admin=Admin
    NewEtherToken gToken borrowRate initialExchangeRate decimals admin
    Comptroller SupportMarket gToken
    CallMintEth Root 1e18 gToken

Macro SetPriceCF gToken price collateralFactor
    PriceOracle SetPrice gToken price
    Comptroller SetCollateralFactor gToken collateralFactor

Macro Give user amount erc20
    Erc20 erc20 Faucet user amount

Macro Donate token amount
    (Trx Value amount (GToken token Donate))

Macro Prep user amount erc20 token allowanceAmount=Nothing
    Erc20 erc20 Faucet user amount
    From user (Erc20 erc20 Approve token (Default allowanceAmount amount))

Macro Allow user token
    From user (Erc20 (GToken token Underlying) Approve token UInt256Max)

Macro AccrueInterest token
    GToken token AccrueInterest

Macro Mint user amount token
    From user (GToken token Mint amount)

Macro SendMintEth user amount token
    From user (Trx GasPrice 0 (Trx Value amount (Send token amount)))

Macro CallMintEth user amount token
    From user (Trx GasPrice 0 (Trx Value amount (GToken token Mint)))

Macro Redeem user amount token
    From user (GToken token Redeem amount)

Macro RedeemEth user amount token
    Trx GasPrice 0 (From user (GToken token Redeem amount))

Macro RedeemUnderlying user amount token
    From user (GToken token RedeemUnderlying amount)

Macro RedeemUnderlyingEth user amount token
    Trx GasPrice 0 (From user (GToken token RedeemUnderlying amount))

Macro BorrowEth user amount token
    Trx GasPrice 0 (From user (GToken token Borrow amount))

Macro Borrow user amount token
    From user (GToken token Borrow amount)

Macro RepayBorrow user amount token
    From user (GToken token RepayBorrow amount)

Macro RepayBorrowEth user amount token
    From user (Trx GasPrice 0 (Trx Value amount (GToken token RepayBorrow)))

Macro RepayBorrowEthMax user amount token
    From user (Trx GasPrice 0 (Trx Value amount (Maximillion RepayBehalf user)))

Macro RepayBorrowBehalf user behalf amount token
    From user (GToken token RepayBorrowBehalf behalf amount)

Macro RepayBorrowEthBehalf user behalf amount token
    From user (Trx GasPrice 0 (Trx Value amount (GToken token RepayBorrowBehalf behalf)))

Macro Liquidate liquidator _ borrower amount token _ collateral
    From liquidator (GToken token Liquidate borrower collateral amount)

Macro LiquidateEthColl liquidator _ borrower amount token _ collateral
    From liquidator (Trx GasPrice 0 (GToken token Liquidate borrower collateral amount))

Macro LiquidateEthBorrow liquidator _ borrower amount token _ collateral
    From liquidator (Trx GasPrice 0 (Trx Value amount (GToken token Liquidate borrower collateral)))

Macro Seize amount token caller liquidator borrower
    From caller (GToken token Seize liquidator borrower amount)

Macro EvilSeize token amount treasure seizer seizee
    GToken token EvilSeize treasure seizer seizee amount

Macro Support gToken collateralFactor=0.5
    Comptroller SupportMarket gToken
    Comptroller SetCollateralFactor gToken collateralFactor

Macro SetCollateralFactor gToken collateralFactor=0.5
    Comptroller SetCollateralFactor gToken collateralFactor

Macro AddReserves amount token user=Root
    From user (GToken token AddReserves amount)

Macro ReduceReserves amount token
    GToken token ReduceReserves amount

Macro FastForward n blocks
    Comptroller FastForward n blocks

Macro EnterMarkets user ...markets
    From user (Comptroller EnterMarkets markets)

Macro ExitMarket user market
    From user (Comptroller ExitMarket market)

Macro Transfer from to amount token
    From from (Erc20 token Transfer to amount)

Macro Cash gToken
    Read Erc20 (GToken gToken Underlying) TokenBalance gToken

Macro QuickMint amount gToken from=Me
    Give from amount (GToken gToken Underlying)
    Allow from gToken
    From from (GToken gToken Mint amount)

Macro QuickBorrow amount gToken ...collateral
    From Me (Comptroller EnterMarkets collateral)
    From Me (Comptroller EnterMarkets (gToken))
    From Me (GToken gToken Borrow amount)

-- Macro for performing a borrow with the sole
-- purpose of adding interest to the erc20 market
Macro BorrowAndRepayWithInterest erc20 gToken amount interestAmount interestRate blocks reserveRate=0
    -- TODO: Make invariant success for these?
    -- TODO: Named args as macros
    InterestRateModel Deploy Fixed Std interestRate
    GToken gToken SetInterestRateModel (InterestRateModel Std Address)
    GToken gToken SetReserveFactor reserveRate
    ListedGToken COLLAT gCOLLAT
    Comptroller SetCollateralFactor gCOLLAT 0.9
    Prep Torrey 1e30 COLLAT gCOLLAT
    Mint Torrey 1e30 gCOLLAT
    EnterMarkets Torrey gCOLLAT gToken
    Assert True (Comptroller CheckMembership Torrey gCOLLAT)
    Assert True (Comptroller CheckMembership Torrey gToken)
    Borrow Torrey amount gToken
    -- Cool, we've borrowed, now let's accrue interest then repay all
    FastForward blocks Blocks
    -- RepayBorrow Torrey (GToken BorrowBalance Torrey) gToken
    From Torrey (Erc20 erc20 Approve gToken amount)
    RepayBorrow Torrey amount gToken
    From Torrey (Erc20 erc20 Approve gToken interestAmount)
    Give Torrey interestAmount erc20
    RepayBorrow Torrey interestAmount gToken
    Assert Equal (GToken gToken BorrowBalance Torrey) Zero

-- Macro for performing a borrow with the sole
-- purpose of adding interest to the ether market
Macro BorrowAndRepayEthWithInterest gEther amount interestAmount interestRate blocks reserveRate=0
    -- TODO: Make invariant success for these?
    -- TODO: Named args as macros
    InterestRateModel Deploy Fixed Std interestRate
    GToken gEther SetInterestRateModel (InterestRateModel Std Address)
    GToken gEther SetReserveFactor reserveRate
    ListedGToken COLLAT gCOLLAT
    Comptroller SetCollateralFactor gCOLLAT 0.9
    Prep Torrey 1e30 COLLAT gCOLLAT
    Mint Torrey 1e30 gCOLLAT
    EnterMarkets Torrey gCOLLAT gEther
    Assert True (Comptroller CheckMembership Torrey gCOLLAT)
    Assert True (Comptroller CheckMembership Torrey gEther)
    Borrow Torrey amount gEther
    -- Cool, we've borrowed, now let's accrue interest then repay all
    FastForward blocks Blocks
    -- RepayBorrow Torrey (GToken BorrowBalance Torrey) gEther
    RepayBorrowEth Torrey amount gEther
    RepayBorrowEth Torrey interestAmount gEther
    Assert Equal (GToken gEther BorrowBalance Torrey) Zero
